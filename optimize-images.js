/**
 * Script ƒë·ªÉ t·ªëi ∆∞u h√≥a ·∫£nh c∆∞·ªõi
 *
 * C√°ch s·ª≠ d·ª•ng:
 * 1. C√†i ƒë·∫∑t package: npm install sharp --save-dev
 * 2. Ch·∫°y script: node optimize-images.js
 *
 * Script n√†y s·∫Ω:
 * - T·ªëi ∆∞u h√≥a t·∫•t c·∫£ ·∫£nh JPG trong th∆∞ m·ª•c public/assets/img
 * - Gi·∫£m k√≠ch th∆∞·ªõc file 60-80% m√† v·∫´n gi·ªØ ch·∫•t l∆∞·ª£ng t·ªët
 * - T·∫°o backup c·ªßa ·∫£nh g·ªëc v√†o th∆∞ m·ª•c backup
 * - Convert sang Progressive JPEG ƒë·ªÉ load nhanh h∆°n
 */

const sharp = require("sharp");
const fs = require("fs");
const path = require("path");

const IMAGE_DIR = "./public/assets/img";
const BACKUP_DIR = "./public/assets/img/backup";
const QUALITY = 85; // Ch·∫•t l∆∞·ª£ng ·∫£nh (80-90 l√† t·ªëi ∆∞u)

// T·∫°o th∆∞ m·ª•c backup n·∫øu ch∆∞a c√≥
if (!fs.existsSync(BACKUP_DIR)) {
  fs.mkdirSync(BACKUP_DIR, { recursive: true });
  console.log("‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c backup");
}

async function optimizeImage(filePath) {
  const fileName = path.basename(filePath);
  const backupPath = path.join(BACKUP_DIR, fileName);

  try {
    // L·∫•y th√¥ng tin ·∫£nh g·ªëc
    const originalStats = fs.statSync(filePath);
    const originalSize = (originalStats.size / 1024 / 1024).toFixed(2); // MB

    // Backup ·∫£nh g·ªëc n·∫øu ch∆∞a c√≥
    if (!fs.existsSync(backupPath)) {
      fs.copyFileSync(filePath, backupPath);
      console.log(`üì¶ Backup: ${fileName}`);
    }

    // T·ªëi ∆∞u h√≥a ·∫£nh
    await sharp(filePath)
      .jpeg({
        quality: QUALITY,
        progressive: true, // Progressive JPEG load nhanh h∆°n
        mozjpeg: true, // S·ª≠ d·ª•ng mozjpeg ƒë·ªÉ n√©n t·ªët h∆°n
      })
      .toFile(filePath + ".tmp");

    // Thay th·∫ø ·∫£nh g·ªëc b·∫±ng ·∫£nh ƒë√£ t·ªëi ∆∞u
    fs.renameSync(filePath + ".tmp", filePath);

    // L·∫•y k√≠ch th∆∞·ªõc ·∫£nh m·ªõi
    const newStats = fs.statSync(filePath);
    const newSize = (newStats.size / 1024 / 1024).toFixed(2); // MB
    const savedPercent = (
      (1 - newStats.size / originalStats.size) *
      100
    ).toFixed(1);

    console.log(
      `‚úÖ ${fileName}: ${originalSize}MB ‚Üí ${newSize}MB (gi·∫£m ${savedPercent}%)`
    );
  } catch (error) {
    console.error(`‚ùå L·ªói khi t·ªëi ∆∞u ${fileName}:`, error.message);
  }
}

async function optimizeAllImages() {
  console.log("üöÄ B·∫Øt ƒë·∫ßu t·ªëi ∆∞u h√≥a ·∫£nh...\n");

  try {
    const files = fs.readdirSync(IMAGE_DIR);
    const imageFiles = files.filter(
      (file) => /\.(jpg|jpeg|JPG|JPEG)$/i.test(file) && file !== "backup"
    );

    console.log(`üì∏ T√¨m th·∫•y ${imageFiles.length} ·∫£nh c·∫ßn t·ªëi ∆∞u\n`);

    for (const file of imageFiles) {
      const filePath = path.join(IMAGE_DIR, file);
      await optimizeImage(filePath);
    }

    console.log("\n‚ú® Ho√†n th√†nh t·ªëi ∆∞u h√≥a ·∫£nh!");
    console.log("üí° L∆∞u √Ω: ·∫¢nh g·ªëc ƒë∆∞·ª£c backup t·∫°i public/assets/img/backup");
  } catch (error) {
    console.error("‚ùå L·ªói:", error.message);
  }
}

// Ch·∫°y script
optimizeAllImages();
